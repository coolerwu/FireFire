# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: build release

on:
  push:
    branches: ['0.0.3']
  pull_request:
    branches: [ "master" ]

jobs:
  build: 
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: export CI=false
    - run: npm install
    - run: npm run build --if-present
#    - run: sudo apt install -y wine64
    - run: sudo apt install aptitude && sudo aptitude -s install wine32
#    - run: sudo dpkg --add-architecture i386 && sudo apt-get update
#        && sudo apt install nginx-core
#        && sudo apt install nginx-full
#        && sudo apt install nginx-light
#        && sudo apt install nginx-extras
#        && sudo apt install libgd3:i386
#        && sudo apt install libodbc1:i386
#        && sudo apt install libgphoto2-6:i386
#        && sudo apt install libsane:i386
#        && sudo apt install gstreamer1.0-plugins-good:i386
#        && sudo apt install libwine:i386
#        && sudo apt install wine32
    - name: 读取当前版本号
      id: version
      uses: ashley-taylor/read-json-property-action@v1.0
      with:
        # 读取dist/package.json的，而不是根路径下的package.json
        path: ./package.json
        property: version
    - name: create GitHub Release
      id: create_release
      uses: actions/create-release@latest
      env:
        # 配置github token （这个无需去github配置，默认存在的）
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # 标签名
        tag_name: v${{steps.version.outputs.value}}
        # release名
        release_name: v${{steps.version.outputs.value}}
        # 是否为草稿
        draft: false
        # 是否为预发布
        prerelease: false
    - run: npm run package-win
#    - name: Save Artifact win32
#      run: |
#        mkdir -p firefire-win32
#        mv /home/runner/work/FireFire/FireFire/firefire-win32-x64 ./firefire-win32/
#        zip -q -r firefire-win32.zip ./firefire-win32
    - name: Upload Release win
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        upload_url: ${{steps.create_release.outputs.upload_url}}
        asset_path: ./target/firefire-${{steps.version.outputs.value}}.exe
        asset_name: firefire-${{steps.version.outputs.value}}.exe
        asset_content_type: application/octet-stream
    - run: npm run package-mac
#    - name: Save Artifact mac
#      run: |
#        mkdir -p firefire-mac
#        mv /home/runner/work/FireFire/FireFire/firefire-mas-x64 ./firefire-mac/
#        zip -q -r firefire-mac.zip ./firefire-mac
    - name: Upload Release mac
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        upload_url: ${{steps.create_release.outputs.upload_url}}
        asset_path: ./target/firefire-${{steps.version.outputs.value}}.dmg
        asset_name: firefire-${{steps.version.outputs.value}}.dmg
        asset_content_type: application/octet-stream
    - run: npm run package-linux
#    - name: Save Artifact linux
#      run: |
#        mkdir -p firefire-linux
#        mv /home/runner/work/FireFire/FireFire/firefire-linux-x64 ./firefire-linux/
#        zip -q -r firefire-linux.zip ./firefire-linux
    - name: Upload Release linux
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        upload_url: ${{steps.create_release.outputs.upload_url}} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./target/firefire-${{steps.version.outputs.value}}.deb
        asset_name: firefire-${{steps.version.outputs.value}}.deb
        asset_content_type: application/octet-stream
